#/*******************************************************************************
# * URLCanonicalizer a robust and high speed URL normalizer/canonicalizer       *
# *                                                                             *
# * Copyright 2018 by Targoman Intelligent Processing Co Pjc.<http://tip.co.ir> *
# *                                                                             *
# *                                                                             *
# * URLCanonicalizer is free software: you can redistribute it and/or modify    *
# * it under the terms of the GNU AFFERO GENERAL PUBLIC LICENSE as published by *
# * the Free Software Foundation, either version 3 of the License, or           *
# * (at your option) any later version.                                         *
# *                                                                             *
# * URLCanonicalizer is distributed in the hope that it will be useful,         *
# * but WITHOUT ANY WARRANTY; without even the implied warranty of              *
# * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the               *
# * GNU LESSER GENERAL PUBLIC LICENSE for more details.                         *
# * You should have received a copy of the GNU LESSER GENERAL PUBLIC LICENSE    *
# * along with URLCanonicalizer. If not, see <http://www.gnu.org/licenses/>.    *
# *                                                                             *
# *******************************************************************************/
Here is a brief guide on how to build URLCanonicalizer

1 - Unpack:  This should give a top-level directory with the subdirectories
    listed in README, as well as a few documentation files and a buildAndTest
    script.

3 - Requirements:
    * Linux x86 64bit machine
    * g++: v7.3 or above
    * GNU make: v4.0 or above
    * Following Qt development packages version 5.6 or above:
            - Qt5Core
            - Qt5Test

4 - git submodule update --init --recursive
 
5 - run qmake with following options:
    * CONFIG+=debug if you want to build a debugging version
    * PREFIX=DESIRED_LOCATION if you want to install binaries in a folder other than default paths

6 - All outputs will be stored in 'out' directory at top level. subdirectories will be:
    * bin:      application and submodule oututs (if any).
    * build:    Build process object files
    * conf:     Dictionaries and static configurations off all apps and tools
    * include:  APIs and essential include files for further development
    * lib:      Shared objects, dlls and static libraries from base library and its submodules
    * unitTest  UnitTest binaries
    * test      Examples and test outputs
    * .depsBuilt Empty file created once upon submodules are prepared
